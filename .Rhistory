t.cred <- load("twitcred")
setup_twitter_oauth(t.api.key, t.api.secret, t.api.accesstoken, t.api.accesssecret)
twtCNYD <- searchTwitter('$TWTR', n = 100)
getCorpus <- function (tweets) {
tweets.text <- lapply(tweets, function(t) {t$getText()})
data.source <- VectorSource(tweets.text)
data.corpus <- Corpus(data.source)
return (data.corpus)
}
data.t.wal = getCorpus(twtCNYD)
dataframe<-data.frame(text=unlist(sapply(data.t.wal, `[`, "content")),
stringsAsFactors=F)
View(dataframe)
twtCNYD <- searchTwitter('$CNYD', n = 100)
data.t.wal = getCorpus(twtCNYD)
dataframe<-data.frame(text=unlist(sapply(data.t.wal, `[`, "content")),
stringsAsFactors=F)
View(dataframe)
twtCNYD <- searchTwitter('$IG', n = 100)
require(tm)
require(twitteR)
require(ROAuth)
twtCNYD <- searchTwitter('$IG', n = 100)
t.cred <- load("twitcred")
setup_twitter_oauth(t.api.key, t.api.secret, t.api.accesstoken, t.api.accesssecret)
twtCNYD <- searchTwitter('$IG', n = 100)
getCorpus <- function (tweets) {
tweets.text <- lapply(tweets, function(t) {t$getText()})
data.source <- VectorSource(tweets.text)
data.corpus <- Corpus(data.source)
return (data.corpus)
}
data.t.wal = getCorpus(twtCNYD)
dataframe<-data.frame(text=unlist(sapply(data.t.wal, `[`, "content")),
stringsAsFactors=F)
View(dataframe)
twtCNYD <- searchTwitter('$CNYD', n = 100)
twtBPTH <- searchTwitter('$BPTH', n = 100)
twtXPO <- searchTwitter('$XPO', n = 100)
twtIG <- searchTwitter('$IG', n = 100)
twtSSYS <- searchTwitter('$SSYS', n = 100)
twtSGYPU <- searchTwitter('$SGYPU', n = 100)
twtNVDQ <- searchTwitter('$NVDQ', n = 100)
save(twtCNYD, file="twtCNYD")
save(twtBPTH, file="twtBPTH")
save(twtXPO, file="twtXPO")
save(twtIG, file="twtIG")
save(twtSSYS, file="twtSSYS")
save(twtNVDQ, file="twtNVDQ")
save(twtIG, file="twtIG")
save(twtSSYS, file="twtSSYS")
save(twtNVDQ, file="twtNVDQ")
gainers = c(twtCNYD,twtBPTH,twtXPO)
losers = c(twtIG,twtSSYS,twtNVDQ)
gainers.corp = getCorpus(gainers)
gainers.df<-data.frame(text=unlist(sapply(gainers.corp, `[`, "content")),stringsAsFactors=F)
losers.corp = getCorpus(losers)
losers.df<-data.frame(text=unlist(sapply(losers.corp, `[`, "content")),stringsAsFactors=F)
View(gainers.df)
View(losers.df)
writeCorpus(gainers.corp,data.corpus1)
writeCorpus(gainers.corp,filenames=data.corpus1)
writeCorpus(gainers.corp,filenames="data.corpus1")
writeCorpus(gainers.corp,path=getwd(), filenames="data.corpus1")
writeCorpus(gainers.corp,path=getwd(), filenames=NULL)
writeCorpus(gainers.corp,path=paste0(getwd(),"/data.corpus1",sep=""), filenames=NULL)
writeCorpus(gainers.corp,path=paste0(getwd(),"/data.corpus1",sep=""), filenames=NULL)
writeCorpus(losers.corp,path=paste0(getwd(),"/data.corpus2",sep=""), filenames=NULL)
getTransCorpus <- function (data.corpus) {
data.corpus <- tm_map(data.corpus, content_transformer(removePunctuation))
data.corpus <- tm_map(data.corpus, content_transformer(tolower))
data.corpus <- tm_map(data.corpus, removeNumbers)
english.stopwords <- stopwords("en")
removeURL <- function(x) gsub("http[[:alnum:]]*", "", x)
data.corpus <- tm_map(data.corpus, content_transformer(removeURL))
data.corpus <- tm_map(data.corpus,content_transformer(removeWords),english.stopwords)
data.corpus <- tm_map(data.corpus,content_transformer(stemDocument))
data.corpus <- tm_map(data.corpus,content_transformer(stripWhitespace))
return (data.corpus)
}
tgainers.corp = getTransCorpus(gainers.corp)
tlosers.corp = getTransCorpus(losers.corp)
tdmGainers <- TermDocumentMatrix(tgainers.corp)
tdmLosers <- TermDocumentMatrix(tlosers.corp)
save(tdmGainers, file="tdmGainers")
save(tdmLosers, file="tdmLosers")
mGain <- as.matrix(tdmGainers)
mLose <- as.matrix(tdmLosers)
WFGain <- rowSums(mGain)
WFGain = sort(WFGain,decreasing = T)
View(mGain)
WFLose <- rowSums(mLose)
WFLose = sort(WFLose,decreasing = T)
findFreqTerms(tdmBost, lowfreq=10)
findFreqTerms(tdmGainers, lowfreq=10)
findFreqTerms(tdmLosers, lowfreq=10)
cbind(WFGain[1:750])
cbind(WFLose[1:951])
require(wordcloud)
palette = brewer.pal(8,"Dark2")
par(mfrow=c(1,2))
wordcloud(words = names(WFGain),
freq=WFGain,
min.freq=10,
random.order=F,
colors=palette)
wordcloud(words = names(WFLose),
freq=WFLose,
min.freq=10,
random.order=F,
colors=palette)
par(mfrow=c(1,1))
palette = brewer.pal(8,"Dark2")
par(mfrow=c(1,2))
wordcloud(words = names(WFGain),
freq=WFGain,
min.freq=30,
random.order=F,
colors=palette)
wordcloud(words = names(WFLose),
freq=WFLose,
min.freq=30,
random.order=F,
colors=palette)
par(mfrow=c(1,1))
palette = brewer.pal(8,"Dark2")
par(mfrow=c(1,2))
wordcloud(words = names(WFGain),
freq=WFGain,
min.freq=20,
random.order=F,
colors=palette)
wordcloud(words = names(WFLose),
freq=WFLose,
min.freq=20,
random.order=F,
colors=palette)
par(mfrow=c(1,1))
palette = brewer.pal(8,"Dark2")
par(mfrow=c(1,2))
wordcloud(words = names(WFGain),
freq=WFGain,
min.freq=5,
random.order=F,
colors=palette)
wordcloud(words = names(WFLose),
freq=WFLose,
min.freq=5,
random.order=F,
colors=palette)
par(mfrow=c(1,1))
install.packages("quantmod")
require(quantmod)
getSymbols("CNYD")
getSymbols("BPTH")
getSymbols("XPO")
getSymbols("IG")
getSymbols("SSYS")
getSymbols("NVDQ")
getSymbols("CNYD")  #highest gainer
getSymbols("RCKY")  #lowest gainer
View(CNYD)
AAPL['2015-04-30']
CNYD['2015-04-30']
chartSeries(CNYD, subset='last 3 months')
addBBands()
addBands()
chartSeries(CNYD, subset='last 3 months')
chartSeries(CNYD, subset='2015-04-30')
RCKY['2015-04-30']
CNYD['2015-04-29']
RCKY['2015-04-29']
sentiment.na <- function(text, pos.words, neg.words) {
text <- gsub('[[:punct:]]', '', text)
text <- gsub('[[:cntrl:]]', '', text)
text <- gsub('\\d+', '', text)
text <- tolower(text)
# split the text into a vector of words
words <- strsplit(text, '\\s+')
words <- unlist(words)
# find which words are positive
pos.matches <- match(words, pos.words)
pos.matches <- !is.na(pos.matches)
# find which words are negative
neg.matches <- match(words, neg.words)
neg.matches <- !is.na(neg.matches)
# calculate the sentiment score
p <- sum(pos.matches)
n <- sum(neg.matches)
if (p == 0 & n == 0)
return (NA)
else
return (p - n)
}
gain.texts <-
lapply(gainers,
function(t) {
iconv(t$getText(),
"latin1", "ASCII", sub="")
})
lose.texts <-
lapply(losers,
function(t) {
iconv(t$getText(),
"latin1", "ASCII", sub="")
})
gain.scores.na <- sapply(gain.texts,
sentiment.na,
pos.words, neg.words)
pos.words = scan('positive-words.txt',
what='character',
comment.char=';')
neg.words = scan('negative-words.txt',
what='character',
comment.char=';')
gain.scores.na <- sapply(gain.texts,
sentiment.na,
pos.words, neg.words)
lose.scores.na <- sapply(lose.texts,
sentiment.na,
pos.words, neg.words)
table(gain.scores.na)
table(lose.scores.na)
par(mfrow=c(1,2))
barplot(table(gain.scores.na), main="Sentiment Analysis for Gainers",
xlab="Score", ylab="Count",
ylim=c(0,40), col="cyan")
grid(nx=NA,ny=NULL,col=rgb(165,165,165,max=255),lty=1)
barplot(table(lose.scores.na), main="Sentiment Analysis for Losers",
xlab="Score", ylab="Count",
ylim=c(0,40), col="cyan")
grid(nx=NA,ny=NULL,col=rgb(165,165,165,max=255),lty=1)
par(mfrow=c(1,1))
gain.vector <- sapply(gain.texts,function (t) {(t)})
gains <- data.frame(Score=gain.scores.na, Text=gain.vector)
View(gains)
lose.vector <- sapply(lose.texts,function (t) {(t)})
loses <- data.frame(Score=lose.scores.na, Text=lose.vector)
View(loses)
library("googleVis", lib.loc="~/R/win-library/3.1")
CNYD['2015-04-29']
RCKY['2015-04-29']
head(as.xts(merge(CNYD,RCKY)))
compare = as.xts(merge(CNYD,RCKY))
View(compare)
compare['2015-04-29']
CNYD['2015-04-29']
cnyd = data.frame(CNYD['2015-04-29'])
View(cnyd)
cnyd = data.frame(CNYD['2015-04-29'],RCKY['2015-04-29'])
View(cnyd)
cols = c(CNYD$Open)
CNYD = data.frame(CNYD['2015-04-30'])
CNYD = data.frame(CNYD['2015-04-29'])
getSymbols("CNYD")  #highest gainer
getSymbols("RCKY")  #lowest gainer
rcky.df = data.frame(RCKY['2015-04-29'])
cnyd.df = data.frame(CNYD['2015-04-29'])
cnyd.df$CNYD.Open
par(mfrow=c(1,2))
barplot(table(gain.scores.na), main="Sentiment Analysis for Gainers",
xlab="Score", ylab="Count",
ylim=c(0,70), col="cyan")
grid(nx=NA,ny=NULL,col=rgb(165,165,165,max=255),lty=1)
barplot(table(lose.scores.na), main="Sentiment Analysis for Losers",
xlab="Score", ylab="Count",
ylim=c(0,70), col="cyan")
grid(nx=NA,ny=NULL,col=rgb(165,165,165,max=255),lty=1)
par(mfrow=c(1,1))
par(mfrow=c(1,2))
barplot(table(gain.scores.na), main="Sentiment Analysis for Gainers",
xlab="Score", ylab="Count",
ylim=c(0,50), col="cyan")
grid(nx=NA,ny=NULL,col=rgb(165,165,165,max=255),lty=1)
barplot(table(lose.scores.na), main="Sentiment Analysis for Losers",
xlab="Score", ylab="Count",
ylim=c(0,50), col="cyan")
grid(nx=NA,ny=NULL,col=rgb(165,165,165,max=255),lty=1)
par(mfrow=c(1,1))
open = c(cnyd.df$CNYD.Open,rcky.df$RCKY.Open)
high = c(cnyd.df$CNYD.High,rcky.df$RCKY.High)
low = c(cnyd.df$CNYD.Low,rcky.df$RCKY.Low)
close = c(cnyd.df$CNYD.Close,rcky.df$RCKY.Close)
volume = c(cnyd.df$CNYD.Volume,rcky.df$RCKY.Volume)
open
stocks = c("CNYD","RCKY")
high = c(cnyd.df$CNYD.High,rcky.df$RCKY.High)
low = c(cnyd.df$CNYD.Low,rcky.df$RCKY.Low)
close = c(cnyd.df$CNYD.Close,rcky.df$RCKY.Close)
volume = c(cnyd.df$CNYD.Volume,rcky.df$RCKY.Volume)
mergedrows = cbind(stocks,open,high,low,close,volume)
head(mergedrows)
chartA = gvisComboChart(mergedrows,
xvar="stocks",
yvar=c("open","high","low","close","volume"),
options=list(seriesType="bars",series='{1:{type:"line"}}'))
plot(chartA)
chartA = gvisComboChart(mergedrows,
xvar="stocks",
yvar=c("open","high","low","close","volume"),
options=list(seriesType="bars",series='{1:{type:"line"}}'))
mergedrows = data.frame(cbind(stocks,open,high,low,close,volume))
chartA = gvisComboChart(mergedrows,
xvar="stocks",
yvar=c("open","high","low","close","volume"),
options=list(seriesType="bars",series='{1:{type:"line"}}'))
open = c(as.numeric(cnyd.df$CNYD.Open,rcky.df$RCKY.Open))
open
open = c(as.numeric(cnyd.df$CNYD.Open),as.numeric(rcky.df$RCKY.Open))
open
open = c(as.numeric(cnyd.df$CNYD.Open),as.numeric(rcky.df$RCKY.Open))
high = c(as.numeric(cnyd.df$CNYD.High),as.numeric(rcky.df$RCKY.High))
low = c(as.numeric(cnyd.df$CNYD.Low),as.numeric(rcky.df$RCKY.Low))
close = c(as.numeric(cnyd.df$CNYD.Close),as.numeric(rcky.df$RCKY.Close))
volume = c(as.numeric(cnyd.df$CNYD.Volume),as.numeric(rcky.df$RCKY.Volume))
stocks = c("CNYD","RCKY")
mergedrows = data.frame(cbind(stocks,open,high,low,close,volume))
chartA = gvisComboChart(mergedrows,
xvar="stocks",
yvar=c("open","high","low","close","volume"),
options=list(seriesType="bars",series='{1:{type:"line"}}'))
chartA = gvisComboChart(mergedrows,
xvar="stocks",
yvar=c(open,high,low,close,volume),
options=list(seriesType="bars",series='{1:{type:"line"}}'))
mergedrows
chartA = gvisComboChart(mergedrows,
xvar="stocks",
yvar=c("open","high","low","close","volume"),
options=list(seriesType="bars",series='{1:{type:"line"}}'))
is.numeric(mergedrows)
is.numeric(mergedrows$stocks)
is.numeric(mergedrows$open)
is.numeric(open)
mergedrows = data.frame(table(stocks,open,high,low,close,volume))
head(mergedrows)
chartA = gvisComboChart(mergedrows,
xvar="stocks",
yvar=c("open","high","low","close","volume"),
options=list(seriesType="bars",series='{1:{type:"line"}}'))
open
mergedrows = matrix(c(open,high,low,close,volume),ncol=2,bycol=TRUE)
mergedrows = matrix(c(open,high,low,close,volume),ncol=2)
mergedrows
mergedrows = matrix(c(open,high,low,close,volume),nrow=2)
mergedrows
high
low
close
volume
colnames(mergedrows) = c("CNYD","RCKY")
colnames(o) = c("CNYD","RCKY")
rownames(o) = c("open","high","low","close","volume")
colnames(o) = c("CNYD","RCKY")
colnames(mergedrows) = c('CNYD','RCKY')
mergedrows
colnames(mergedrows) = c('CNYD','RCKY')
rownames(mergedrows) = c("open","high","low","close","volume")
colnames(mergedrows) = c("open","high","low","close","volume")
rownames(mergedrows) = c('CNYD','RCKY')
mergedrows
head(mergedrows)
chartA = gvisComboChart(mergedrows,
xvar="stocks",
yvar=c("open","high","low","close","volume"),
options=list(seriesType="bars",series='{1:{type:"line"}}'))
merges = data.frame(mergedrows)
chartA = gvisComboChart(merges,
xvar="stocks",
yvar=c("open","high","low","close","volume"),
options=list(seriesType="bars",series='{1:{type:"line"}}'))
mergedrows = as.table(mergedrows)
chartA = gvisComboChart(mergedrows,
xvar="stocks",
yvar=c("open","high","low","close","volume"),
options=list(seriesType="bars",series='{1:{type:"line"}}'))
mergedrows
merges = as.data.frame(mergedrows)
chartA = gvisComboChart(merges,
xvar="stocks",
yvar=c("open","high","low","close","volume"),
options=list(seriesType="bars",series='{1:{type:"line"}}'))
chartA = gvisComboChart(merges,
xvar=merges$Var1,
yvar=c("open","high","low","close","volume"),
options=list(seriesType="bars",series='{1:{type:"line"}}'))
chartA = gvisComboChart(merges,
xvar=[1,],
chartA = gvisComboChart(merges,
xvar=merges[1,],
yvar=c("open","high","low","close","volume"),
options=list(seriesType="bars",series='{1:{type:"line"}}'))
merges[1,]
merges[,1]
barplot(mergedrows,legend=T,beside=T,main='Smoking Status by SES')
plot(mergedrows,main="Smoking Status By Socioeconomic Status")
stocks = c("CNYD","RCKY")
mergedrows = matrix(c(stocks,open,high,low,close,volume),nrow=2)
colnames(mergedrows) = c("stocks","open","high","low","close","volume")
mergedrows = as.table(mergedrows)
merges = as.data.frame(mergedrows)
head(mergedrows)
chartA = gvisComboChart(merges,
xvar="stocks",
yvar=c("open","high","low","close","volume"),
options=list(seriesType="bars",series='{1:{type:"line"}}'))
barplot(merges)
merges
rownames = c("CNYD","RCKY")
colnames(mergedrows) = c("stocks","open","high","low","close","volume")
mergedrows = as.table(mergedrows)
merges = as.data.frame(mergedrows)
barplot(merges)
barplot(mergedrows)
mergedrows = matrix(c(stocks,open,high,low,close,volume),nrow=2)
mergedrows = as.table(mergedrows)
merges = as.data.frame(mergedrows)
barplot(mergedrows)
chartA = gvisComboChart(merges,
xvar="stocks",
yvar=c("open","high","low","close","volume"),
options=list(seriesType="bars",series='{1:{type:"line"}}'))
mergedrows
mergedrows = matrix(c(open,high,low,close,volume),nrow=2)
colnames(mergedrows) = c("open","high","low","close","volume")
mergedrows = data.frame(stocks,open)
str(mergedrows)
chartA = gvisComboChart(merges,
xvar="stocks",
yvar=c("open"),
options=list(seriesType="bars",series='{1:{type:"line"}}'))
chartA = gvisComboChart(merges,
xvar="stocks",
yvar=c("open"),
options=list(seriesType="bars",series='{0:{type:"line"}}'))
mergedrows
chartA = gvisComboChart(mergedrows,
xvar="stocks",
yvar=c("open"),
options=list(seriesType="bars",series='{0:{type:"line"}}'))
plot(chartA)
mergedrows = data.frame(stocks,open,high,low,close,volume)
str(mergedrows)
chartA = gvisComboChart(mergedrows,
xvar="stocks",
yvar=c("open",,"high","low","close","volume"),
options=list(seriesType="bars",series='{0:{type:"line"}}'))
chartA = gvisComboChart(mergedrows,
xvar="stocks",
yvar=c("open","high","low","close","volume"),
options=list(seriesType="bars",series='{0:{type:"line"}}'))
plot(chartA)
chartA = gvisComboChart(mergedrows,
xvar="stocks",
yvar=c("open","high","low","close","volume"),
options=list(seriesType="bars",series='{5:{type:"line"}}'))
plot(chartA)
chartA = gvisComboChart(mergedrows,
xvar="stocks",
yvar=c("open","high","low","close"),
options=list(seriesType="bars",series='{5:{type:"line"}}'))
plot(chartA)
chartA = gvisBarChart(mergedrows,
xvar="stocks",
yvar=c("open","high","low","close"))
plot(chartA)
mergedrows
mergedrows = data.frame(stocks,open,high,low,close)
str(mergedrows)
chartA = gvisBarChart(mergedrows,
xvar="stocks",
yvar=c("open","high","low","close"))
plot(chartA)
chartA = gvisColumnChart(mergedrows,
xvar="stocks",
yvar=c("open","high","low","close"))
plot(chartA)
save.image("C:/Stuff/Downloads/MS BSAN/WA/Project Report/Code/global environment.RData")
par(mfrow=c(1,2))
barplot(table(gain.scores.na), main="Sentiment Analysis for Gainers",
xlab="Score", ylab="Count",
ylim=c(0,50), col="cyan")
grid(nx=NA,ny=NULL,col=rgb(165,165,165,max=255),lty=1)
barplot(table(lose.scores.na), main="Sentiment Analysis for Losers",
xlab="Score", ylab="Count",
ylim=c(0,50), col="cyan")
grid(nx=NA,ny=NULL,col=rgb(165,165,165,max=255),lty=1)
par(mfrow=c(1,1))
View(gains)
qnorm(0.975)
qnorm(0.95)
power.t.test(n = 20,delta = 1.5,sd = 2)
power.t.test(n=n,delta=1.5,sd=s,sig.level=0.05,
type="one.sample",alternative="two.sided",strict = TRUE)
power.t.test(n=20,delta=1.5,sd=s,sig.level=0.05,
type="one.sample",alternative="two.sided",strict = TRUE)
power.t.test(n=20,delta=1.5,sd=2,sig.level=0.05,
type="one.sample",alternative="two.sided",strict = TRUE)
require(wordcloud)
palette = brewer.pal(8,"Dark2")
par(mfrow=c(1,2))
wordcloud(words = names(WFGain),
freq=WFGain,
min.freq=5,
random.order=F,
colors=palette)
wordcloud(words = names(WFLose),
freq=WFLose,
min.freq=5,
random.order=F,
colors=palette)
par(mfrow=c(1,1))
